@inject IJSRuntime JsRuntime

@using BzsHomePage.Db.Entities
@using BzsHomePage.Db.Services


<BzsPaper class="flex max-w-full min-w-fit flex-col px-2">
    <header class="mb-6 flex w-full flex-row items-center justify-start">
        <BzsLabel Text="@HomePageEntity.Name" EnableBg="false" text-class="font-minor text-xl font-medium text-slate-800" class="px-0" />
        <div class="w-full"></div>
    </header>
    <content class="flex flex-col gap-3">
        <div class="flex w-full flex-row items-center justify-between gap-4">
            <BzsLabel Text="@HomePageEntity.PublicIpAddr" EnableBg="false" text-class="font-tertiary text-black" />
            <BzsButton LabelType="LabelType.Icon" IconUrl="@Assets["./assets/right-arrow.png"]" class="aspect-square size-8 rounded-full" OnClick="() => OpenNewPage(HomePageEntity.PublicIpAddr)" />
        </div>
        <div class="flex w-full flex-row items-center justify-between gap-4">
            <BzsLabel Text="@HomePageEntity.PrivateIpAddr" EnableBg="false" text-class="font-tertiary text-black" />
            <BzsButton LabelType="LabelType.Icon" IconUrl="@Assets["./assets/right-arrow.png"]" class="aspect-square size-8 rounded-full" OnClick="() => OpenNewPage(HomePageEntity.PrivateIpAddr)" />
        </div>
    </content>
</BzsPaper>

@code {

    private bool _isPublic = true;

    [Parameter, EditorRequired]
    public required HomePageEntity HomePageEntity { get; set; }


    private async Task OpenNewPage(string? page)
    {
        if (page is null)
            return;


        page = page.Trim();
        if (page.StartsWith("http://") || page.StartsWith("https://"))
            await JsRuntime.InvokeVoidAsync("openInNewTab", page);
        else
            await JsRuntime.InvokeVoidAsync("openInNewTab", $"http://{page}");
    }
}
